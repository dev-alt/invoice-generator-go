services:
  app:
    build: .
    container_name: invoice-generator
    ports:
      - "8080:8080"
    environment:
      - POSTGRES_URL=postgresql://invoice_user:${DB_PASSWORD}@db:5432/invoice_db?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - FILE_STORAGE_PATH=/app/storage/files
    depends_on:
      db:
        condition: service_healthy
      db-migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    volumes:
      - ./storage/files:/app/storage/files
    networks:
      - invoice-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15-alpine
    container_name: invoice-db
    environment:
      - POSTGRES_USER=invoice_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=invoice_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - invoice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U invoice_user -d invoice_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  db-migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    environment:
      - POSTGRES_URL=postgresql://invoice_user:${DB_PASSWORD}@db:5432/invoice_db?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
    networks:
      - invoice-network

  redis:
    image: redis:7-alpine
    container_name: invoice-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - invoice-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

networks:
  invoice-network:
    driver: bridge

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local